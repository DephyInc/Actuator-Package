#ifndef ACTPACK_STRUCT_H
#define ACTPACK_STRUCT_H
/*
 * actpack_struct.h
 *
 * AUTOGENERATED FILE! ONLY EDIT IF YOU ARE A MACHINE!
 *
 *
 *  Created on: 2020-04-09 12:05:18.673990
 *      Author: Dephy Inc
 */

#include "ActPack_device_spec.h "
#include <sstream> 
#include <stdio.h> 
#include <string> 

#include <ctime> 

#define ACTPACK_SYSTEM_TIME_POS 32
#define ACTPACK_STRUCT_DEVICE_FIELD_COUNT 33

struct ActPackState 
 { 

	int rigid;
	int id;
	int state_time;
	int accelx;
	int accely;
	int accelz;
	int gyrox;
	int gyroy;
	int gyroz;
	int mot_ang;
	int mot_vel;
	int mot_acc;
	int mot_cur;
	int mot_volt;
	int batt_volt;
	int batt_curr;
	int temperature;
	int status_mn;
	int status_ex;
	int status_re;
	int genvar_0;
	int genvar_1;
	int genvar_2;
	int genvar_3;
	int genvar_4;
	int genvar_5;
	int genvar_6;
	int genvar_7;
	int genvar_8;
	int genvar_9;
	int ank_ang;
	int ank_vel;
	//the system time
	clock_t systemTime;
	uint32_t deviceData[ACTPACK_STRUCT_DEVICE_FIELD_COUNT];

	// sets the data.  Requires system start time.  If unavailable, please use 0
	void setData(uint32_t _deviceStateBuffer[], clock_t systemStartTime) 
 	{
		rigid=_deviceStateBuffer[ACTPACK_RIGID_POS ];
		deviceData[ACTPACK_RIGID_POS ]=_deviceStateBuffer[ACTPACK_RIGID_POS ];
		id=_deviceStateBuffer[ACTPACK_ID_POS ];
		deviceData[ACTPACK_ID_POS ]=_deviceStateBuffer[ACTPACK_ID_POS ];
		state_time=_deviceStateBuffer[ACTPACK_STATE_TIME_POS ];
		deviceData[ACTPACK_STATE_TIME_POS ]=_deviceStateBuffer[ACTPACK_STATE_TIME_POS ];
		accelx=_deviceStateBuffer[ACTPACK_ACCELX_POS ];
		deviceData[ACTPACK_ACCELX_POS ]=_deviceStateBuffer[ACTPACK_ACCELX_POS ];
		accely=_deviceStateBuffer[ACTPACK_ACCELY_POS ];
		deviceData[ACTPACK_ACCELY_POS ]=_deviceStateBuffer[ACTPACK_ACCELY_POS ];
		accelz=_deviceStateBuffer[ACTPACK_ACCELZ_POS ];
		deviceData[ACTPACK_ACCELZ_POS ]=_deviceStateBuffer[ACTPACK_ACCELZ_POS ];
		gyrox=_deviceStateBuffer[ACTPACK_GYROX_POS ];
		deviceData[ACTPACK_GYROX_POS ]=_deviceStateBuffer[ACTPACK_GYROX_POS ];
		gyroy=_deviceStateBuffer[ACTPACK_GYROY_POS ];
		deviceData[ACTPACK_GYROY_POS ]=_deviceStateBuffer[ACTPACK_GYROY_POS ];
		gyroz=_deviceStateBuffer[ACTPACK_GYROZ_POS ];
		deviceData[ACTPACK_GYROZ_POS ]=_deviceStateBuffer[ACTPACK_GYROZ_POS ];
		mot_ang=_deviceStateBuffer[ACTPACK_MOT_ANG_POS ];
		deviceData[ACTPACK_MOT_ANG_POS ]=_deviceStateBuffer[ACTPACK_MOT_ANG_POS ];
		mot_vel=_deviceStateBuffer[ACTPACK_MOT_VEL_POS ];
		deviceData[ACTPACK_MOT_VEL_POS ]=_deviceStateBuffer[ACTPACK_MOT_VEL_POS ];
		mot_acc=_deviceStateBuffer[ACTPACK_MOT_ACC_POS ];
		deviceData[ACTPACK_MOT_ACC_POS ]=_deviceStateBuffer[ACTPACK_MOT_ACC_POS ];
		mot_cur=_deviceStateBuffer[ACTPACK_MOT_CUR_POS ];
		deviceData[ACTPACK_MOT_CUR_POS ]=_deviceStateBuffer[ACTPACK_MOT_CUR_POS ];
		mot_volt=_deviceStateBuffer[ACTPACK_MOT_VOLT_POS ];
		deviceData[ACTPACK_MOT_VOLT_POS ]=_deviceStateBuffer[ACTPACK_MOT_VOLT_POS ];
		batt_volt=_deviceStateBuffer[ACTPACK_BATT_VOLT_POS ];
		deviceData[ACTPACK_BATT_VOLT_POS ]=_deviceStateBuffer[ACTPACK_BATT_VOLT_POS ];
		batt_curr=_deviceStateBuffer[ACTPACK_BATT_CURR_POS ];
		deviceData[ACTPACK_BATT_CURR_POS ]=_deviceStateBuffer[ACTPACK_BATT_CURR_POS ];
		temperature=_deviceStateBuffer[ACTPACK_TEMPERATURE_POS ];
		deviceData[ACTPACK_TEMPERATURE_POS ]=_deviceStateBuffer[ACTPACK_TEMPERATURE_POS ];
		status_mn=_deviceStateBuffer[ACTPACK_STATUS_MN_POS ];
		deviceData[ACTPACK_STATUS_MN_POS ]=_deviceStateBuffer[ACTPACK_STATUS_MN_POS ];
		status_ex=_deviceStateBuffer[ACTPACK_STATUS_EX_POS ];
		deviceData[ACTPACK_STATUS_EX_POS ]=_deviceStateBuffer[ACTPACK_STATUS_EX_POS ];
		status_re=_deviceStateBuffer[ACTPACK_STATUS_RE_POS ];
		deviceData[ACTPACK_STATUS_RE_POS ]=_deviceStateBuffer[ACTPACK_STATUS_RE_POS ];
		genvar_0=_deviceStateBuffer[ACTPACK_GENVAR_0_POS ];
		deviceData[ACTPACK_GENVAR_0_POS ]=_deviceStateBuffer[ACTPACK_GENVAR_0_POS ];
		genvar_1=_deviceStateBuffer[ACTPACK_GENVAR_1_POS ];
		deviceData[ACTPACK_GENVAR_1_POS ]=_deviceStateBuffer[ACTPACK_GENVAR_1_POS ];
		genvar_2=_deviceStateBuffer[ACTPACK_GENVAR_2_POS ];
		deviceData[ACTPACK_GENVAR_2_POS ]=_deviceStateBuffer[ACTPACK_GENVAR_2_POS ];
		genvar_3=_deviceStateBuffer[ACTPACK_GENVAR_3_POS ];
		deviceData[ACTPACK_GENVAR_3_POS ]=_deviceStateBuffer[ACTPACK_GENVAR_3_POS ];
		genvar_4=_deviceStateBuffer[ACTPACK_GENVAR_4_POS ];
		deviceData[ACTPACK_GENVAR_4_POS ]=_deviceStateBuffer[ACTPACK_GENVAR_4_POS ];
		genvar_5=_deviceStateBuffer[ACTPACK_GENVAR_5_POS ];
		deviceData[ACTPACK_GENVAR_5_POS ]=_deviceStateBuffer[ACTPACK_GENVAR_5_POS ];
		genvar_6=_deviceStateBuffer[ACTPACK_GENVAR_6_POS ];
		deviceData[ACTPACK_GENVAR_6_POS ]=_deviceStateBuffer[ACTPACK_GENVAR_6_POS ];
		genvar_7=_deviceStateBuffer[ACTPACK_GENVAR_7_POS ];
		deviceData[ACTPACK_GENVAR_7_POS ]=_deviceStateBuffer[ACTPACK_GENVAR_7_POS ];
		genvar_8=_deviceStateBuffer[ACTPACK_GENVAR_8_POS ];
		deviceData[ACTPACK_GENVAR_8_POS ]=_deviceStateBuffer[ACTPACK_GENVAR_8_POS ];
		genvar_9=_deviceStateBuffer[ACTPACK_GENVAR_9_POS ];
		deviceData[ACTPACK_GENVAR_9_POS ]=_deviceStateBuffer[ACTPACK_GENVAR_9_POS ];
		ank_ang=_deviceStateBuffer[ACTPACK_ANK_ANG_POS ];
		deviceData[ACTPACK_ANK_ANG_POS ]=_deviceStateBuffer[ACTPACK_ANK_ANG_POS ];
		ank_vel=_deviceStateBuffer[ACTPACK_ANK_VEL_POS ];
		deviceData[ACTPACK_ANK_VEL_POS ]=_deviceStateBuffer[ACTPACK_ANK_VEL_POS ];

		systemTime= systemStartTime-clock();
		deviceData[ACTPACK_SYSTEM_TIME_POS]=systemTime;
	};

	void sendToStream(std::stringstream &ss) 
 	{
		ss << state_time <<",";
		ss << accelx <<",";
		ss << accely <<",";
		ss << accelz <<",";
		ss << gyrox <<",";
		ss << gyroy <<",";
		ss << gyroz <<",";
		ss << mot_ang <<",";
		ss << mot_vel <<",";
		ss << mot_acc <<",";
		ss << mot_cur <<",";
		ss << mot_volt <<",";
		ss << batt_volt <<",";
		ss << batt_curr <<",";
		ss << temperature <<",";
		ss << status_mn <<",";
		ss << status_ex <<",";
		ss << status_re <<",";
		ss << genvar_0 <<",";
		ss << genvar_1 <<",";
		ss << genvar_2 <<",";
		ss << genvar_3 <<",";
		ss << genvar_4 <<",";
		ss << genvar_5 <<",";
		ss << genvar_6 <<",";
		ss << genvar_7 <<",";
		ss << genvar_8 <<",";
		ss << genvar_9 <<",";
		ss << ank_ang <<",";
		ss << ank_vel <<",";
		ss << systemTime <<",";
	};

	 static void GetLabels(std::string *labels) 
 	{
		labels[ACTPACK_RIGID_POS]= "rigid";
		labels[ACTPACK_ID_POS]= "id";
		labels[ACTPACK_STATE_TIME_POS]= "state_time";
		labels[ACTPACK_ACCELX_POS]= "accelx";
		labels[ACTPACK_ACCELY_POS]= "accely";
		labels[ACTPACK_ACCELZ_POS]= "accelz";
		labels[ACTPACK_GYROX_POS]= "gyrox";
		labels[ACTPACK_GYROY_POS]= "gyroy";
		labels[ACTPACK_GYROZ_POS]= "gyroz";
		labels[ACTPACK_MOT_ANG_POS]= "mot_ang";
		labels[ACTPACK_MOT_VEL_POS]= "mot_vel";
		labels[ACTPACK_MOT_ACC_POS]= "mot_acc";
		labels[ACTPACK_MOT_CUR_POS]= "mot_cur";
		labels[ACTPACK_MOT_VOLT_POS]= "mot_volt";
		labels[ACTPACK_BATT_VOLT_POS]= "batt_volt";
		labels[ACTPACK_BATT_CURR_POS]= "batt_curr";
		labels[ACTPACK_TEMPERATURE_POS]= "temperature";
		labels[ACTPACK_STATUS_MN_POS]= "status_Mn";
		labels[ACTPACK_STATUS_EX_POS]= "status_Ex";
		labels[ACTPACK_STATUS_RE_POS]= "status_Re";
		labels[ACTPACK_GENVAR_0_POS]= "genvar_0";
		labels[ACTPACK_GENVAR_1_POS]= "genvar_1";
		labels[ACTPACK_GENVAR_2_POS]= "genvar_2";
		labels[ACTPACK_GENVAR_3_POS]= "genvar_3";
		labels[ACTPACK_GENVAR_4_POS]= "genvar_4";
		labels[ACTPACK_GENVAR_5_POS]= "genvar_5";
		labels[ACTPACK_GENVAR_6_POS]= "genvar_6";
		labels[ACTPACK_GENVAR_7_POS]= "genvar_7";
		labels[ACTPACK_GENVAR_8_POS]= "genvar_8";
		labels[ACTPACK_GENVAR_9_POS]= "genvar_9";
		labels[ACTPACK_ANK_ANG_POS]= "ank_ang";
		labels[ACTPACK_ANK_VEL_POS]= "ank_vel";
		labels[ACTPACK_SYSTEM_TIME_POS]="sys_time";
	};

	 static std::string GetLabelsForLog() 
 	{
		std::string labels[ACTPACK_STRUCT_DEVICE_FIELD_COUNT];
		GetLabels(labels);
		std::string outputString;
		for(int index=ACTPACK_STATE_TIME_POS;index<ACTPACK_STRUCT_DEVICE_FIELD_COUNT;index++)
		{
			 outputString=outputString +labels[index]+",";
		}
		return outputString;
	};
}; 
#endif ////ACTPACK_STRUCT_H
