#ifndef BATTCYCLER_STRUCT_H
#define BATTCYCLER_STRUCT_H

/*
 * battcycler_struct.h
 *
 * AUTOGENERATED FILE! ONLY EDIT IF YOU ARE A MACHINE!
 *
 * Created on: 2020-06-23 15:28:46.806100
 * Author: Dephy, Inc.
 *
 */

#include "BattCycler_device_spec.h"
#include <stdio.h> 
#include <time.h> 
#include <string.h> 
#include <stdint.h> 

#define BATTCYCLER_SYSTEM_TIME_POS 14
#define BATTCYCLER_STRUCT_DEVICE_FIELD_COUNT 15
#define BATTCYCLER_LABEL_MAX_CHAR_LENGTH 11

//This is The Device fields*10 + deviceField+1. Ten is the max string length of 2^32 in decimal separated from commas
#define BATTCYCLER_DATA_STRING_LENGTH 166

#ifdef __cplusplus
extern "C"
{
#endif

#pragma pack(1)

struct BattCyclerState
{
	int battcycler;
	int id;
	int state_time;
	int current;
	int voltage;
	int esr;
	int fsm_state;
	int button;
	int leds;
	int genvar_0;
	int genvar_1;
	int genvar_2;
	int genvar_3;
	int status;
	//the system time
	int systemTime;
	uint32_t deviceData[BATTCYCLER_STRUCT_DEVICE_FIELD_COUNT];
};

#pragma pack()

/// \brief Assigns the data in the buffer to the correct struct parameters
///
///@param BattCycler is the struct with the data to be set
///
///@param _deviceStateBuffer is the buffer containing the data to be assigned to the struct
///
///@param systemStartTime the time the system started. If unknown, use 0.
///
void BattCyclerSetData(struct BattCyclerState *battcycler, uint32_t _deviceStateBuffer[], int systemStartTime);

/// \brief takes all data and places it into single, comma separated string
///
///@param BattCycler is the struct with the data to be placed in the string
///
///@param dataString is where the new string wll be placed 
///
void BattCyclerDataToString(struct BattCyclerState *battcycler, char dataString[BATTCYCLER_DATA_STRING_LENGTH]);

/// \brief retrieves the string equivalent of all parameter names
///
///@param labels is the array of labels containing the parameter names
///
void BattCyclerGetLabels(char labels[BATTCYCLER_STRUCT_DEVICE_FIELD_COUNT][BATTCYCLER_LABEL_MAX_CHAR_LENGTH]);

/// \brief retrieves the string equivalent of parameter names starting with state time.  Parameters 
/// prior to state time, such as id,  are not included. 
///
///@param labels is the array of labels containing the parameter names
///
int BattCyclerGetLabelsForLog(char labels[BATTCYCLER_STRUCT_DEVICE_FIELD_COUNT][BATTCYCLER_LABEL_MAX_CHAR_LENGTH]);

#ifdef __cplusplus
}//extern "C"
#endif

#endif ////ACTPACK_STRUCT_H
